####################################################################################################
########                        EXCC data Integration-    August 16 2019                  ##########
########                        Developer Raj(Basavaraj Javaregowda)                      ##########
####################################################################################################

import string
import re
import netutils
import shellutils
import socket
import rest_requests as requests

import logger
import modeling

import json


from appilog.common.system.types import ObjectStateHolder
from appilog.common.system.types.vectors import ObjectStateHolderVector
from com.hp.ucmdb.discovery.library.clients import ClientsConsts 
            
from xml.dom import minidom   
import StringIO


class GSSError(Exception):
    def _init_(self,value):
       self.value=value
    def _str_(self):
       return repr(self.value)

#EXCC discovery added by Raj  August 16 -2019
def getip(localshell,hostname):
    #hostName = None
                         
    if hostname:
        dnsResolver = netutils.DNSResolver(hostname)
        #resolveHostIp
        #dnsResolver = netutils.IpResolver(hostname)
        #hostip = dnsResolver.resolveHostIp(hostname)
        hostip = netutils.resolveIP(localshell,hostname)
        if hostip:
            return hostip
    return None

def getEXCCComputer(datastore,Framework):
    OSHVResult = ObjectStateHolderVector()             
    #numRows = 0
    localShell = shellutils.ShellUtils(Framework.createClient(ClientsConsts.LOCAL_SHELL_PROTOCOL_NAME))
    logger.debug(
    localShell)
    numRows = 1
    for i in datastore:
        excc_OSH = ObjectStateHolder('unix')
        IPAddr = getip(localShell,i["scanname"])
        logger.debug(IPAddr)
        excc_OSH.setAttribute('name',i["sacm_computer"])
        excc_OSH.setAttribute('F_SCANNAME',i["scanname"])
        excc_OSH.setAttribute('fqdn',i["scanname"])
        excc_OSH.setAttribute('Domain_for_FCAMS',i["scanname"])
        excc_OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
        excc_OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAM',i["oem_cluster_target_name"])
        excc_OSH.setAttribute('environment',i["env"])
        excc_OSH.setAttribute('F_SUPPORT_GROUP',i["support_group"])
        excc_OSH.setAttribute('os_family',"unix")
        excc_OSH.setAttribute('discovered_os_name',"Linux")
        excc_OSH.setAttribute('ip_address_1',IPAddr)
        logger.debug(str(numRows) + " rows" )
        OSHVResult.add(excc_OSH)
        Framework.sendObjects(OSHVResult)
        Framework.flushObjects()
        OSHVResult.clear()
        numRows += 1 
    retStr =  "Only " + str(numRows) + " rows" 
    return retStr   

def getSchema(Schemadatastore,Framework):
    OSHVResult = ObjectStateHolderVector()             
        #numRows = 0
       
    numRows = 1
    #if  i["pdbservicename"]:
    for i in Schemadatastore:
        try:
            OSH = ObjectStateHolder('unix')#,i["SACM_COMPUTER"])
            #logger.debug("PDB "+i["pdbservicename"])
            OSH.setAttribute('name',i["sacm_computer"])
            OSH.setAttribute('data_note',"Adding CDB")
            OSH.setAttribute('F_SCANNAME',i["scanname"])
            OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
            OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAM',i["oem_cluster_target_name"])
            OSH.setAttribute('os_family',"unix")
            #OSH.setAttribute('discovered_os_name',"Linux")
            OSHVResult.add(OSH)
    
            cdb_OSH = ObjectStateHolder('oracle')
            cdb_OSH.setAttribute('name',i["cdbservicename"])
            cdb_OSH.setAttribute('root_container',i["sacm_computer"])
            cdb_OSH.setAttribute('root_container_name',i["sacm_computer"])
            cdb_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
            cdb_OSH.setAttribute('discovered_product_NAME',"Oracle DB")
            cdb_OSH.setAttribute('product_name',"oracle_database")
            cdb_OSH.setAttribute('database_dbtype',"oracle")
            cdb_OSH.setAttribute('vendor',"oracle_corp")
            cdb_OSH.setContainer(OSH)
            OSHVResult.add(cdb_OSH) 
            OSHVResult.add(modeling.createLinkOSH('composition',OSH,cdb_OSH))
            logger.debug(i["cdbservicename"])
            if  i["pdbservicename"]:
                pdb_OSH = ObjectStateHolder('oracle_pdb')
                pdb_OSH.setAttribute('name',i["pdbservicename"])
                pdb_OSH.setAttribute('F_SCANNAME',i["scanname"])
                #pdb_OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
                #pdb_OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAME',i["oem_cluster_target_name"])
                pdb_OSH.setAttribute('F_SACM_COMPUTER',i["sacm_computer"])
                #pdb_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
                pdb_OSH.setAttribute('F_CDBSERVICENAME',i["cdbservicename"])
                #pdb_OSH.setAttribute('F_OEM_PDB_TARGET_NAME',i["oem_pdb_target_name"])
                pdb_OSH.setAttribute('F_PDBSERVICENAME',i["pdbservicename"])
                pdb_OSH.setAttribute('root_container',i["cdbservicename"])
                #excc_OSH.setAttribute('root_container_name',i["CDBSERVICENAME"])
                pdb_OSH.setContainer(cdb_OSH)
                OSHVResult.add(pdb_OSH)
                OSHVResult.add(modeling.createLinkOSH('composition',cdb_OSH,pdb_OSH))
                logger.debug("PDB")
                logger.debug(i["cdbservicename"])
                logger.debug(i["pdbservicename"])
            else:
                logger.debug("PDB null "+i["cdbservicename"])
                
            excc_OSH = ObjectStateHolder('ford_oracle_deep_dive')
            excc_OSH.setAttribute('name',i["schema_name"])
            excc_OSH.setAttribute('itms_id_number',str(i["app_id"]))
            excc_OSH.setAttribute('F_SCANNAME',i["scanname"])
            #excc_OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
            #excc_OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAME',i["oem_cluster_target_name"])
            excc_OSH.setAttribute('F_SACM_COMPUTER',i["sacm_computer"])
            #excc_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
            excc_OSH.setAttribute('F_CDBSERVICENAME',i["cdbservicename"])
            #excc_OSH.setAttribute('F_OEM_PDB_TARGET_NAME',i["oem_pdb_target_name"])
            logger.debug("Schema")
           # logger.debug(i["cdbservicename"])
            #logger.debug(i["pdbservicename"])
            #logger.debug(i["schema_name"])
            if i["pdbservicename"]:
                excc_OSH.setAttribute('F_PDBSERVICENAME',i["pdbservicename"])
                excc_OSH.setAttribute('root_container',i["pdbservicename"])
                excc_OSH.setContainer(pdb_OSH)
                OSHVResult.add(excc_OSH)
                OSHVResult.add(modeling.createLinkOSH('composition',pdb_OSH,excc_OSH))
    
            else:
                excc_OSH.setAttribute('root_container',i["cdbservicename"])
                excc_OSH.setContainer(cdb_OSH)
                OSHVResult.add(excc_OSH)
                OSHVResult.add(modeling.createLinkOSH('composition',cdb_OSH,excc_OSH))
    
            Framework.sendObjects(OSHVResult)
            Framework.flushObjects()
            OSHVResult.clear()
        except:
            msg = logger.prepareJythonStackTrace('') 
            #if msg.find('java.sql.SQLException:') > -1:
            #   mrrError = msg.split("java.sql.SQLException:")[1]
            #else:
            mrrError = msg
            ErrNote = mrrError[:250]                                                                          
            logger.debug(ErrNote +"Raj schema job " +i["cdbservicename"] )
                # Raj added above  lines 11/14/2018         
        #schemaOSH.setAttribute('itms_id_number',itmss[s])
        #schemaOSH.setAttribute('name',schemas[s])
        #schemaOSH.setAttribute('data_note',notes[s])     
        #schemaOSH.setContainer(instanceOSH)  
        #OSHVResult.add(schemaOSH)
        #OSHVResult.add(modeling.createLinkOSH('composition',instanceOSH,schemaOSH))
        numRows += 1
        #logger.debug("AppID")
        #logger.debug(i["oem_cluster_target_name"])
        #logger.debug(i["app_id"])
    #if numRows < 2000:
    #   retStr =  "Only " + str(numRows) + " rows" 
    #else:
    retStr = "YES"
                    
    return retStr   

def getPdb(Pdbdatastore,Framework):
    OSHVResult = ObjectStateHolderVector()             
    numRows = 1
    for i in Pdbdatastore:
        try:
            #logger.debug("Here's the PDBSERVICENAME name :" +i["PDBSERVICENAME"])#+",  ENV :" +i["ENV"] +",  SUPPORT_GROUP :" +i["SUPPORT_GROUP"])
            OSH = ObjectStateHolder('unix')#,i["SACM_COMPUTER"])
            OSH.setAttribute('name',i["sacm_computer"])
            OSH.setAttribute('data_note',"Adding CDB")
            OSH.setAttribute('F_SCANNAME',i["scanname"])
            #OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
            #OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAM',i["oem_cluster_target_name"])
            OSH.setAttribute('os_family',"unix")
            #OSH.setAttribute('discovered_os_name',"Linux")
            OSHVResult.add(OSH)
    
            cdb_OSH = ObjectStateHolder('oracle')
            cdb_OSH.setAttribute('name',i["cdbservicename"])
            cdb_OSH.setAttribute('root_container',i["sacm_computer"])
            cdb_OSH.setAttribute('root_container_name',i["sacm_computer"])
            #cdb_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
            cdb_OSH.setAttribute('discovered_product_NAME',"Oracle DB")
            cdb_OSH.setAttribute('product_name',"oracle_database")
            cdb_OSH.setAttribute('database_dbtype',"oracle")
            cdb_OSH.setAttribute('vendor',"oracle_corp")
            cdb_OSH.setContainer(OSH)
            OSHVResult.add(cdb_OSH) 
            OSHVResult.add(modeling.createLinkOSH('composition',OSH,cdb_OSH))
    
            excc_OSH = ObjectStateHolder('oracle_pdb')
            excc_OSH.setAttribute('name',i["pdbservicename"])
            excc_OSH.setAttribute('F_SCANNAME',i["scanname"])
            #excc_OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
            #excc_OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAME',i["oem_cluster_target_name"])
            excc_OSH.setAttribute('F_SACM_COMPUTER',i["sacm_computer"])
            #excc_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
            excc_OSH.setAttribute('F_CDBSERVICENAME',i["cdbservicename"])
            #excc_OSH.setAttribute('F_OEM_PDB_TARGET_NAME',i["oem_pdb_target_name"])
            excc_OSH.setAttribute('F_PDBSERVICENAME',i["pdbservicename"])
            excc_OSH.setAttribute('root_container',i["cdbservicename"])
            #excc_OSH.setAttribute('root_container_name',i["CDBSERVICENAME"])
            excc_OSH.setContainer(cdb_OSH)
            OSHVResult.add(excc_OSH)
            OSHVResult.add(modeling.createLinkOSH('composition',cdb_OSH,excc_OSH))
            
            Framework.sendObjects(OSHVResult)
            Framework.flushObjects()
            OSHVResult.clear()         
        except:
            msg = logger.prepareJythonStackTrace('') 
                #if msg.find('java.sql.SQLException:') > -1:
                #   mrrError = msg.split("java.sql.SQLException:")[1]
                #else:
            mrrError = msg
            ErrNote = mrrError[:250]                                                                          
            logger.debug(ErrNote +"Raj PDB job " +i["cdbservicename"] )
   
            numRows += 1
        if numRows < 2000:
           retStr =  "Only " + str(numRows) + " rows" 
        else:
           retStr = "YES"
                       # am I happy? 
    return retStr 

def getCdb(Cdbdatastore,Framework):
    OSHVResult = ObjectStateHolderVector()             
    numRows = 1
    for i in Cdbdatastore:
        #logger.debug("Here's the OEM_CDB_TARGET_NAME name :" +i["OEM_CDB_TARGET_NAME"]) #+",  ENV :" +i["ENV"] +",  SUPPORT_GROUP :" +i["SUPPORT_GROUP"])
        OSH = ObjectStateHolder('unix')#,i["SACM_COMPUTER"])
        OSH.setAttribute('name',i["sacm_computer"])
        OSH.setAttribute('data_note',"Adding CDB")
        OSH.setAttribute('F_SCANNAME',i["scanname"])
        #OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
        #OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAM',i["oem_cluster_target_name"])
        #OSH.setAttribute('environment',i["ENV"])
        #excc_OSH.setAttribute('F_SUPPORT_GROUP',i["SUPPORT_GROUP"])
        OSH.setAttribute('os_family',"unix")
        #OSH.setAttribute('discovered_os_name',"Linux")
        OSHVResult.add(OSH)        
        excc_OSH = ObjectStateHolder('oracle')
        excc_OSH.setAttribute('name',i["servicename"])
        #excc_OSH.setAttribute('itms_id_number',i["APP_ID"])
        excc_OSH.setAttribute('F_SCANNAME',i["scanname"])
        #excc_OSH.setAttribute('F_CLUSTER_COMMMON_NAME',i["cluster_commmon_name"])
        #excc_OSH.setAttribute('F_OEM_CLUSTER_TARGET_NAME',i["oem_cluster_target_name"])
        excc_OSH.setAttribute('servername',i["sacm_computer"])
        excc_OSH.setAttribute('root_container',i["sacm_computer"])
        #excc_OSH.setAttribute('root_container_name',i["SACM_COMPUTER"])
        #excc_OSH.setAttribute('F_OEM_CDB_TARGET_NAME',i["oem_cdb_target_name"])
        ver = i["dbversion"]+" "+i["dbversioncat"]
        excc_OSH.setAttribute('version',ver)
        excc_OSH.setAttribute('discovered_product_NAME',"Oracle DB")
        excc_OSH.setAttribute('product_name',"oracle_database")
        excc_OSH.setAttribute('database_dbtype',"oracle")
        excc_OSH.setAttribute('vendor',"oracle_corp")
        excc_OSH.setContainer(OSH)  
        #OSHVResult.add(schemaOSH)
        OSHVResult.add(excc_OSH)
        OSHVResult.add(modeling.createLinkOSH('composition',OSH,excc_OSH))

        Framework.sendObjects(OSHVResult)
        Framework.flushObjects()
        OSHVResult.clear()         

        numRows += 1
    if numRows < 2000:
       retStr =  "Only " + str(numRows) + " rows" 
    else:
       retStr = "YES"
                                   # am I happy? 
    return retStr

##############################################
########      MAIN                  ##########
##############################################
def DiscoveryMain(Framework):
    OSHVResult = ObjectStateHolderVector()
    
    #api_token = Framework.getParameter('PersistentCookie')
    api_token = Framework.getParameter('token')
    logger.debug("API Token: " + api_token)
    #api_url_base_cdb = 'https://sacmapi.apps.pp01i.edc1.cf.ford.com/api/query/getcdb'
    #api_url_base_cluster = 'https://sacmapi.apps.pp01i.edc1.cf.ford.com/api/query/getcluster' 
    #api_url_base_pdb =  'https://sacmapi.apps.pp01i.edc1.cf.ford.com/api/query/getpdb'
    #api_url_base_schema = 'https://sacmapi.apps.pp01i.edc1.cf.ford.com/api/query/getschema'
    api_url_base_cluster = Framework.getParameter('Computer_url')
    api_url_base_cdb = Framework.getParameter('CDB_url')
    api_url_base_pdb = Framework.getParameter('PDB_url')
    api_url_base_schema = Framework.getParameter('Schema_url') 
    #header_gs = {"SACM-AUTH" : '4239383b-8be2-46e6-a61a-6c6453b94ea4',
    #             'Accept': 'application/json'}   
    header_gs = {"SACM-AUTH" : api_token,
                 'Accept': 'application/json'} 
    logger.debug(header_gs)
    logger.debug("Processing EXCC Computers")
    api_url = api_url_base_cluster
    response = requests.get(api_url, headers=header_gs)
    datastore = json.loads(response.text)
    #logger.debug(datastore)
    resultGSS = getEXCCComputer(datastore,Framework)
    if response.status_code == 404:
       logger.debug('Fail to get URL: EXCC Computers ' + api_url)
       return None
    elif response.status_code == 403:
       logger.debug('403 Forbidden on URL EXCC Computers ' + api_url)
       return None    
       
    logger.debug("Processing EXCC Cdb")
    api_url = api_url_base_cdb
    responsecdb = requests.get(api_url, headers=header_gs)
    datastorecdb = json.loads(responsecdb.text)
    #logger.debug(datastorecdb)
    resultGSS = getCdb(datastorecdb,Framework)
    if responsecdb.status_code == 404:
       logger.debug('Fail to get URL: EXCC Cdb ' + api_url)
       return None
    elif responsecdb.status_code == 403:
       logger.debug('403 Forbidden on URL EXCC Cdb ' + api_url)
       return None    
        
    
    logger.debug("Processing EXCC Pdb")
    api_url = api_url_base_pdb
    responsePdb = requests.get(api_url, headers=header_gs)
    #logger.debug(datastorePdb)
    #logger.debug(datastorePdb)
    try:
        datastorePdb = json.loads(responsePdb.text)
        resultGSS = getPdb(datastorePdb,Framework)
    except Exception as err:
           logger.debug(err)
           logger.debug( " PDB calling job "  )
    
    if responsePdb.status_code == 404:
       logger.debug('Fail to get URL: EXCC Pdb ' + api_url)
       return None
    elif responsePdb.status_code == 403:
       logger.debug('403 Forbidden on URL EXCC Pdb ' + api_url)
       return None    
        
    
    logger.debug("Processing EXCC Schema")
    api_url = api_url_base_schema
    responseSchema = requests.get(api_url, headers=header_gs)
    try:
        datastoreSchema = json.loads(responseSchema.text)
        #logger.debug(datastoreSchema)
        resultGSS = getSchema(datastoreSchema,Framework)
    except Exception as err:
        logger.debug(err)
        logger.debug( " schema calling job "  )
    
    if responseSchema.status_code == 404:
       logger.debug('Fail to get URL:EXCC Schema ' + api_url)
       return None
    elif responseSchema.status_code == 403:
       logger.debug('403 Forbidden on URL EXCC Schema ' + api_url)
       return None    
           
    return
